mas_loadlib_if_not mywmws wm
mas_loadlib_if_not termilal_emulator_euristic_show terminal_emulator


mas_loadlib_if_not datemt time
typemas datemt && export MAS_TIME_LIBSCREEN=$(datemt)

declare -xg MAS_SCREEN_MODE MAS_SCREEN_MODE_PREV
# -- export SCREENRC="${MAS_CONF_DIR_TERM:=${MAS_CONF_DIR:=${MAS_DIR:=$HOME/.mas}/config}/term_new}/screen/rc0" 
export SCREENRC="${MAS_CONF_DIR_SCREENS:=${MAS_CONF_DIR_TERM:-${MAS_CONF_DIR:-${MAS_DIR:-$HOME/.mas}/config}/term_new}/masscreen}/rc0" 
export SCREENDIR=${SCREENDIR:=${MAS_SCREEN_VAR_DIR:=${MAS_VAR_DIR:-${MAS_VAR_DIR:-${MAS_DIR:-$HOME/.mas}/var}}/screen}}

export MAS_SCREEN_CMD=${MAS_SCREEN_CMD:=/usr/bin/screen}


export MAS_SCREEN_SESSION_REGEX='s@^[[:space:]]\+[[:digit:]]\+\.\([[:alnum:]_.-]\+\)[[:space:]]\+(\(Detached\|Attached\))@\1@p'
function screen_list_as ()
{
  export MAS_SCREEN_WS MAS_SCREEN_TERMINAL_EMULATOR
  local rex=${1:-'Detached\|Attached'}
  shift
  local ws=${1:-${MAS_SCREEN_WS:=${MAS_DESKTOP_NAME}}}
  shift
  local term=${1:-${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}}
  shift
  local limit=${1:-99999}
  shift
# echo "${term}\.${ws}\.[[:digit:]]\+.*(\<\($rex\)\>) --- $term.$ws - $limit" >&2
  ${MAS_SCREEN_CMD:=/usr/bin/screen} -list "${term}.${ws}" \
    | grep "${term}\.${ws}\.[[:digit:]]\+.*(\<\($rex\)\>)" \
    | head -${limit}
}
function screen_list_as_test ()
{
  local qpid term ws id state IFS='.'
  screen_list_as "$@" \
   | while read  qpid term ws id ; do
       if [[ $id =~ ^[[:space:]]*([[:digit:]]+)[[:space:]]+\(([[:alpha:]]+)\) ]] ; then
         id=${BASH_REMATCH[1]}
         state=${BASH_REMATCH[2]}
	 echo "qpid:$qpid term:$term ws:$ws id:'$id' state:'$state'" >&2
       fi
     done
}
function screen_find_detached_old ()
{
  local mterm mws mid mstate
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR}${MAS_SCREEN_TERMINAL_EMULATOR:+.}"
  local ases=${1:-"${pref1}${MAS_SCREEN_WS:-wsNone}"}
# local ases=${1:-"$MAS_SCREEN_WS"}
  shift
  ${MAS_SCREEN_CMD:=/usr/bin/screen} -list $ases \
    | grep Detached \
    | sed -n -e $MAS_SCREEN_SESSION_REGEX \
    | grep "\<$ases\."\
    | sort \
    | while read s ; do
       echo "$s"
       break
      done 
}
function screen_list_ws ()
{
  local limit=${1:-99999}
  shift
  screen_list_as '' '' '' $limit
}
function screen_list_ws_old ()
{
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR}${MAS_SCREEN_TERMINAL_EMULATOR:+.}"
  local ases=${1:-"${pref1}${MAS_SCREEN_WS:-wsNone}"}
# local ases=${1:-"$MAS_SCREEN_WS"}
  echo "$FUNCNAME $MAS_SCREEN_WS : $ases" >>/tmp/ases.tmp
  ${MAS_SCREEN_CMD:=/usr/bin/screen} -list \
    | sed -n -e $MAS_SCREEN_SESSION_REGEX \
    | grep "\<$ases\."\
    | sort
}
function screen_list_attached ()
{
  local limit=${1:-99999}
  shift
  screen_list_as 'Attached' '' '' $limit
}
function screen_list_attached_old ()
{
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR}${MAS_SCREEN_TERMINAL_EMULATOR:+.}"
  local ases=${1:-"${pref1}${MAS_SCREEN_WS:-wsNone}"}
# local ases=${1:-"$MAS_SCREEN_WS"}
  echo "$FUNCNAME $MAS_SCREEN_WS : $ases" >>/tmp/ases.tmp
  ${MAS_SCREEN_CMD:=/usr/bin/screen} -list \
    | grep Attached \
    | sed -n -e $MAS_SCREEN_SESSION_REGEX \
    | grep "\<$ases\."\
    | sort
}
function screen_list_detached ()
{
  local limit=${1:-99999}
  shift
  screen_list_as 'Detached' '' '' $limit
}

function screen_list_detached_old ()
{
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR}${MAS_SCREEN_TERMINAL_EMULATOR:+.}"
  local ases=${1:-"${pref1}${MAS_SCREEN_WS:-wsNone}"}
# local ases=${1:-"$MAS_SCREEN_WS"}
  echo "$FUNCNAME $MAS_SCREEN_WS : $ases" >>/tmp/ases.tmp
  ${MAS_SCREEN_CMD:=/usr/bin/screen} -list \
    | grep Detached \
    | sed -n -e $MAS_SCREEN_SESSION_REGEX \
    | grep "\<$ases\."\
    | sort
}

function screen_find_detached ()
{
  local limit=${1:-1}
  screen_list_detached $limit | sed -n -e $MAS_SCREEN_SESSION_REGEX
}
function screen_find_attached ()
{
  local limit=${1:-1}
  screen_list_attached $limit | sed -n -e $MAS_SCREEN_SESSION_REGEX
}
function screen_find ()
{
  local limit=${1:-1}
  screen_list_ws $limit | sed -n -e $MAS_SCREEN_SESSION_REGEX
}


function screen_try_new ()
{
  local ws term id rest
  local defws=${1:-${MAS_SCREEN_WS:=${MAS_DESKTOP_NAME}}}
  shift
  local defterm=${1:-${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}}
  shift

  local pos=0 IFS='.' freeid=0
  while read term ws id rest ; do
#   echo "Test:$pos -term:$term ($defterm) -ws:$ws ($defws) -id:$id -rest:$rest" >&2
    if [[ "$id" -eq "$freeid" ]] && [[ "$ws" == "$defws" ]] && [[ "$term" == "$defterm" ]] ; then
      freeid=$(( $freeid + 1 ))
#   else
#     echo "Why:$pos -term:$term ($defterm) -ws:$ws ($defws) -id:$id ($freeid) -rest:$rest" >&2
    fi
    pos=$(( $pos + 1 ))
  done
# echo "Test:$pos -freeid:$freeid" >&2
  echo "${defterm}.${defws}.${freeid}"
}
function screen_propose_new ()
{
  screen_find 99999 | sort | screen_try_new
}
function screen_propose_new_old ()
{
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR}${MAS_SCREEN_TERMINAL_EMULATOR:+.}"
  local ases=${1:-"${pref1}${MAS_SCREEN_WS:-wsNone}"}
  local pos=0
# local ases=${1:-"$MAS_SCREEN_WS"}
  shift
  local IFS='.'
  local pid name rest
  ${MAS_SCREEN_CMD:=/usr/bin/screen} -list "$ases" \
  	| grep 'Attached\|Detached' \
	| while read pid name rest ; do
            echo "Test:$pos - $pid - $name - $rest" >&2
	    pos=$(( $pos + 1 ))
	  done
# mas_screen_ises=$( ${MAS_SCREEN_CMD:=/usr/bin/screen} -list "$ases" \
#     | grep Attached \
#     | sed -n -e $MAS_SCREEN_SESSION_REGEX \
#     | sort \
#     | while read s ; do
#         if [[ $s =~ ^[[:digit:]]+\.$ases\.$mas_screen_ises$ ]] ; then
#           echo "EQ:$pos - #${mas_screen_ises}; listed:'$s' - ases:'$ases'   /  ises:'$mas_screen_ises'" >&2
#           mas_screen_ises=$(( $mas_screen_ises + 1 ))
#         else
#           echo "GOT:$pos - #${mas_screen_ises}; listed:'$s' - ases:'$ases'   /  ises:'$mas_screen_ises'" >&2
#           echo "${mas_screen_ises:-0}"
#         fi
#         pos=$(( $pos + 1 ))
#       done | tail -1 )
# echo "$ases :: $mas_screen_ises :: $mas_screen_sess" >&2
  echo "$FUNCNAME ws:$MAS_SCREEN_WS : ases:$ases : ises:$mas_screen_ises" >>/tmp/ases.tmp
  echo -n "$ases.$mas_screen_ises"
}
function screen_find_or_propose ()
{
  local sess=$( screen_find_detached )
  if [[ "$sess" ]] ; then
    echo -n "$sess"
  else
    screen_propose_new
  fi
}
function screen_find_or_propose_old ()
{
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR}${MAS_SCREEN_TERMINAL_EMULATOR:+.}"
  local ases=${1:-"${pref1}${MAS_SCREEN_WS:-wsNone}"}
# local ases=${1:-"$MAS_SCREEN_WS"}
  shift
  export mas_screen_sess mas_screen_ises=0
  local s ases
  mas_screen_sess=$( screen_find_detached $ases)
  if [[ "$mas_screen_sess" ]] ; then
    echo -n "$mas_screen_sess"
  else
    screen_propose_new "$ases"
  fi
}
function screen_find_or_propose_here ()
{
  export MAS_SCREEN_TERMINAL_EMULATOR=${MAS_SCREEN_TERMINAL_EMULATOR:=$( termilal_emulator_euristic_show )}
  export MAS_SCREEN_WS=${MAS_SCREEN_WS:-${MAS_DESKTOP_NAME}}
  local pref1="${MAS_SCREEN_TERMINAL_EMULATOR:-unknown_emu}."

  local ases="${pref1}${MAS_SCREEN_WS:-wsNone}"
  screen_find_or_propose "$ases"
}
#     function mas_call_screen ()
#     {
#       export MAS_SCREEN_SESSION=$( screen_find_or_propose_here $@ )
#     #         export MAS_SCREEN_SESSION_NUM=`echo $MAS_SCREEN_SESSION`|sed -e 's@^.*\.\(.*\)$@\1@'
#       export MAS_SCREEN_SESSION_NUM=`echo $MAS_SCREEN_SESSION| awk -F'.' '{print $3}'`
#       export MAS_SCREEN_SHELL=${BASH_SOURCE[0]}
#       export MAS_SCREEN_SHELL1=$0
#       export MAS_TIME_SCREEN_START=`datemt`
#       export MAS_TIME_SCREEN=$MAS_TIME_SCREEN_START
#     # 	  echo "starting screen mode '$MAS_SCREEN_MODE' session '$MAS_SCREEN_SESSION'" >&2
#     #	  MAS_BASH_MESSAGES[${#MAS_BASH_MESSAGES[@]}]="starting screen mode '$MAS_SCREEN_MODE' session '$MAS_SCREEN_SESSION'"
#     #	  declare -p MAS_BASH_MESSAGES
#     #	  sleep 2
#       mas_source_register_script_a f "$FUNCNAME:$MAS_SCREEN_MODE"
#       case "${MAS_SCREEN_MODE:=rs_none}" in
#        screen-exec|screen-default)
#     #-- define_std_directories
#         #echo "sleeping 1" >&2 ; sleep 1
#         exec ${MAS_SCREEN_CMD:=/usr/bin/screen} -D -R -S "$MAS_SCREEN_SESSION"
#        ;;
#        detached)
#     #-- define_std_directories
#         ${MAS_SCREEN_CMD:=/usr/bin/screen} -d -m -S "$MAS_SCREEN_SESSION"
#         ${MAS_SCREEN_CMD:=/usr/bin/screen} -ls
#         unset MAS_DO_EXIT
#        ;;
#        screen)
#     #-- define_std_directories
#         #echo "sleeping 1" >&2 ; sleep 1
#         ${MAS_SCREEN_CMD:=/usr/bin/screen} -D -R -S "$MAS_SCREEN_SESSION"
#         trap mas_bash_init_after_shell SIGTERM SIGINT SIGHUP SIGTERM EXIT
#         echo "${MAS_SCREEN_CMD:=/usr/bin/screen} -D -R '$MAS_SCREEN_SESSION'; sleeping $msleep ; press ^C or wait" >&2
#         echo "sleeping $msleep" >&2 ; sleep "$msleep"
#         trap - SIGTERM SIGINT SIGHUP SIGTERM EXIT
#         echo "sleep ended IGNOREEOF:${IGNOREEOF}" >&2	      
#         if [[ "$MAS_DO_EXIT" ]] ; then
#           exit
#         fi
#        ;;
#        screen-double)
#     #--   define_std_directories
#         echo "sleeping 1" >&2 ; sleep 1
#         ${MAS_SCREEN_CMD:=/usr/bin/screen} -D -R -S "$MAS_SCREEN_SESSION"
#         trap mas_bash_init_after_shell SIGTERM SIGINT SIGHUP SIGTERM EXIT
#         echo "${MAS_SCREEN_CMD:=/usr/bin/screen} -D -R '$MAS_SCREEN_SESSION'; sleeping $msleep ; press ^C or wait" >&2
#         echo "sleeping $msleep" >&2 ; sleep "$msleep"
#         trap - SIGTERM SIGINT SIGHUP SIGTERM EXIT
#         echo "sleep ended IGNOREEOF:${IGNOREEOF}" >&2	      
#         if [[ "$MAS_DO_EXIT" ]] ; then
#           exit
#         fi
#        ;;	     
#        root)
#        ;;     
#        noscreen-naked)
#        ;;     
#        noscreen|noscreen-default)
#     #--   define_std_directories
#     #--    [[ $MAS_BASH_RC_CALLED ]] || mas_source_scriptsn _bashrc_rc - MAS_CONF_DIR_BASH rc
#         MAS_BASH_RC_CALLED=yes
#        ;;
#        noscreen*|rs_none)
#     #--   define_std_directories
#     #    [[ $MAS_BASH_RC_CALLED ]] || mas_source_scriptsn _bashrc_rc - MAS_CONF_DIR_BASH rc
#         MAS_BASH_RC_CALLED=yes
#        ;;
#        *)
#     #--   define_std_directories
#         echo "sleeping 5" >&2 ; sleep 5
#         ${MAS_SCREEN_CMD:=/usr/bin/screen} -D -R "$MAS_SCREEN_SESSION"
#        ;;
#       esac 
#     }
export -f screen_find_detached screen_list_as screen_list_ws screen_list_attached screen_list_detached screen_propose_new
export -f screen_find_or_propose screen_find_or_propose_here


# vi: ft=sh
